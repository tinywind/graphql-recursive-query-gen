type Query {
  getUser(id: ID!): User
  getUsers(limit: Int, offset: Int): [User!]!
  getPost(id: ID!): Post
  getPosts(userId: ID, limit: Int, offset: Int): [Post!]!
  searchPosts(query: String!, limit: Int): [Post!]!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User!
  deleteUser(id: ID!): Boolean!
  createPost(input: CreatePostInput!): Post!
  updatePost(id: ID!, input: UpdatePostInput!): Post!
  deletePost(id: ID!): Boolean!
  likePost(postId: ID!): Post!
  addComment(postId: ID!, content: String!): Comment!
}

type User {
  id: ID!
  username: String!
  email: String!
  fullName: String
  avatar: String
  bio: String
  posts: [Post!]!
  comments: [Comment!]!
  likedPosts: [Post!]!
  followers: [User!]!
  following: [User!]!
  createdAt: String!
  updatedAt: String!
}

type Post {
  id: ID!
  title: String!
  content: String!
  excerpt: String
  author: User!
  comments: [Comment!]!
  likes: Int!
  likedBy: [User!]!
  tags: [String!]!
  published: Boolean!
  publishedAt: String
  createdAt: String!
  updatedAt: String!
}

type Comment {
  id: ID!
  content: String!
  author: User!
  post: Post!
  parentComment: Comment
  replies: [Comment!]!
  likes: Int!
  createdAt: String!
  updatedAt: String!
}

input CreateUserInput {
  username: String!
  email: String!
  fullName: String
  bio: String
}

input UpdateUserInput {
  username: String
  email: String
  fullName: String
  bio: String
  avatar: String
}

input CreatePostInput {
  title: String!
  content: String!
  tags: [String!]
  published: Boolean
}

input UpdatePostInput {
  title: String
  content: String
  tags: [String!]
  published: Boolean
}
